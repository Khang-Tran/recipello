{"version":3,"sources":["../src/app.js"],"names":["schema","typeDefs","resolvers","app","use","req","res","next","token","headers","undefined","currentUser","jwt","verify","process","env","SECRET","err","console","error","server","ApolloServer","context","UserModel","RecipeModel","bodyParser","urlencoded","extended","json","mongoose","connect","MONGO_URI","useNewUrlParser","then","log","catch","applyMiddleware"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,wCAAqB;AACjCC,6BADiC;AAEjCC;AAFiC,CAArB,CAAf;;AAKA,MAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC/B,SAAMC,QAAQH,IAAII,OAAJ,CAAY,eAAZ,CAAd;AACA,OAAID,UAAU,MAAV,IAAoBA,UAAUE,SAAlC,EAA6C;AAC1C,UAAI;AACD,eAAMC,cAAc,MAAMC,uBAAIC,MAAJ,CAAWL,KAAX,EAAkBM,QAAQC,GAAR,CAAYC,MAA9B,CAA1B;AACAX,aAAIM,WAAJ,GAAkBA,WAAlB;AACF,OAHD,CAGE,OAAOM,GAAP,EAAY;AACXC,iBAAQC,KAAR,CAAcF,GAAd;AACF;AACH;AACDV;AACF,CAXD;;AAcA,MAAMa,SAAS,IAAIC,iCAAJ,CAAiB;AAC7BrB,SAD6B;AAE7BsB,YAAS,CAAC,EAAEjB,GAAF,EAAD,KAAa;AACnB,YAAM,EAAEM,WAAF,KAAkBN,GAAxB;AACA,aAAO;AACJkB,mCADI;AAEJC,yCAFI;AAGJb;AAHI,OAAP;AAMF;AAV4B,CAAjB,CAAf;;AAaAR,IAAIC,GAAJ,CAAQqB,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAxB,IAAIC,GAAJ,CAAQqB,qBAAWG,IAAX,EAAR;;AAGAC,mBAASC,OAAT,CAAiBhB,QAAQC,GAAR,CAAYgB,SAA7B,EAAwC,EAAEC,iBAAiB,IAAnB,EAAxC,EACGC,IADH,CACQ,MAAMf,QAAQgB,GAAR,CAAY,oBAAZ,CADd,EAEGC,KAFH,CAEUlB,GAAD,IAASC,QAAQgB,GAAR,CAAYjB,GAAZ,CAFlB;;AAIAG,OAAOgB,eAAP,CAAuB,EAAEjC,GAAF,EAAvB;kBACeA,G","file":"app.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport mongoose from 'mongoose';\r\nimport { ApolloServer } from 'apollo-server-express';\r\nimport { makeExecutableSchema } from 'graphql-tools';\r\nimport typeDefs from './schema';\r\nimport resolvers from './resolvers';\r\nimport { UserModel } from './models/User';\r\nimport { RecipeModel } from './models/Recipe';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst schema = makeExecutableSchema({\r\n   typeDefs,\r\n   resolvers\r\n});\r\n\r\nconst app = express();\r\napp.use(async (req, res, next) => {\r\n   const token = req.headers['authorization'];\r\n   if (token !== 'null' && token !== undefined) {\r\n      try {\r\n         const currentUser = await jwt.verify(token, process.env.SECRET);\r\n         req.currentUser = currentUser;\r\n      } catch (err) {\r\n         console.error(err);\r\n      }\r\n   }\r\n   next();\r\n});\r\n\r\n\r\nconst server = new ApolloServer({\r\n   schema,\r\n   context: ({ req }) => {\r\n      const { currentUser } = req;\r\n      return {\r\n         UserModel,\r\n         RecipeModel,\r\n         currentUser\r\n      };\r\n\r\n   }\r\n});\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\n\r\n\r\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true })\r\n  .then(() => console.log('Database connected'))\r\n  .catch((err) => console.log(err));\r\n\r\nserver.applyMiddleware({ app });\r\nexport default app;\r\n"]}