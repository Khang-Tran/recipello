{"version":3,"sources":["../../src/models/User.js"],"names":["Schema","mongoose","UserSchema","username","type","String","required","unique","password","email","joinDate","Date","default","now","favorites","Types","ObjectId","ref","pre","next","isModified","bcrypt","genSalt","err","salt","hash","UserModel","model"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,SAASC,mBAASD,MAAxB;;AAEA,MAAME,aAAa,IAAIF,MAAJ,CAAW;AAC3BG,aAAU;AACPC,YAAMC,MADC;AAEPC,gBAAU,IAFH;AAGPC,cAAQ;AAHD,IADiB;AAM3BC,aAAU;AACPJ,YAAMC,MADC;AAEPC,gBAAU;AAFH,IANiB;AAU3BG,UAAO;AACJL,YAAMC,MADF;AAEJC,gBAAU;AAFN,IAVoB;AAc3BI,aAAU;AACPN,YAAMO,IADC;AAEPC,eAASD,KAAKE,GAAL;AAFF,IAdiB;AAkB3BC,cAAW;AACRV,YAAM,CAACJ,OAAOe,KAAP,CAAaC,QAAd,CADE;AAERC,WAAK;AAFG;AAlBgB,CAAX,CAAnB;;AAwBAf,WAAWgB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACnC,OAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAC/B,aAAOD,IAAP;AACF;;AAEDE,sBAAOC,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/B,UAAID,GAAJ,EAAS,OAAOJ,KAAKI,GAAL,CAAP;;AAETF,yBAAOI,IAAP,CAAY,KAAKjB,QAAjB,EAA2BgB,IAA3B,EAAiC,CAACD,GAAD,EAAME,IAAN,KAAe;AAC7C,aAAIF,GAAJ,EAAS,OAAOJ,KAAKI,GAAL,CAAP;AACT,cAAKf,QAAL,GAAgBiB,IAAhB;AACAN;AACF,OAJD;AAKF,IARD;AASF,CAdD;;AAiBO,MAAMO,gCAAYzB,mBAAS0B,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAlB","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst UserSchema = new Schema({\r\n   username: {\r\n      type: String,\r\n      required: true,\r\n      unique: true\r\n   },\r\n   password: {\r\n      type: String,\r\n      required: true\r\n   },\r\n   email: {\r\n      type: String,\r\n      required: true\r\n   },\r\n   joinDate: {\r\n      type: Date,\r\n      default: Date.now()\r\n   },\r\n   favorites: {\r\n      type: [Schema.Types.ObjectId],\r\n      ref: 'Recipe'\r\n   }\r\n});\r\n\r\nUserSchema.pre('save', function(next) {\r\n   if (!this.isModified('password')) {\r\n      return next;\r\n   }\r\n\r\n   bcrypt.genSalt(10, (err, salt) => {\r\n      if (err) return next(err);\r\n\r\n      bcrypt.hash(this.password, salt, (err, hash) => {\r\n         if (err) return next(err);\r\n         this.password = hash;\r\n         next();\r\n      });\r\n   });\r\n});\r\n\r\n\r\nexport const UserModel = mongoose.model('User', UserSchema);\r\n"]}